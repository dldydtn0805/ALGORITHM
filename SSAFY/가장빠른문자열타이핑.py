"""
어떤 문자열 A를 타이핑하려고 한다.

그냥 한 글자씩 타이핑 한다면 A의 길이만큼 키를 눌러야 할 것이다.

여기에 속도를 조금 더 높이기 위해 어떤 문자열 B가 저장되어 있어서 키를 한번 누른 것으로 B전체를 타이핑 할 수 있다.

이미 타이핑 한 문자를 지우는 것은 불가능하다.

예를 들어 A=”asakusa”, B=”sa”일 때, 다음 그림과 같이 B를 두 번 사용하면 5번 만에 A를 타이핑 할 수 있다.

A와 B가 주어질 때 A 전체를 타이핑 하기 위해 키를 눌러야 하는 횟수의 최솟값을 구하여라.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스마다 첫 번째 줄에 두 문자열 A, B가 주어진다. A의 길이는 1이상 10,000이하, B의 길이는 1이상 100이하이다.


[출력]

각 테스트 케이스마다 A 전체를 타이핑 하기 위해 키를 눌러야 하는 횟수의 최솟값을 출력한다.
"""
def BruteForce(word, element):
    # 전체의 길이
    n = len(word)
    # 요소의 길이
    m = len(element)
    i = 0
    j = 0
    # 요소 반복 횟수 초기화
    cnt = 0
    # 단어와 요소를 동시에 순회
    while i < n and j < m:
        # 해당 인덱스에서 일치하지 않으면
        if word[i] != element[j]:
            # 단어와 요소의 인덱스를 초기화, 반복 마다 단어와 요소의 인덱스의 차이가 1이 벌어지게 된다
            i = i - j
            j = -1
        i += 1
        j += 1
        # j가 최대 길이라는건, 탐색한 단어와 요소가 일치했다는 것
        if j == m:
            # i += 1
            j = 0
            cnt += 1
            # [겹치는 길이(반복 횟수 * 겹치는 요소)] + 반복 횟수 = 누른 횟수
    # 일반 타자기 누르는 횟수 + B버튼 누르는 횟수
    return len(word) + (1-len(element))*cnt

#import sys
#sys.stdin = open('input.txt')

T = int(input())

for i in range(1, T+1):
    word, element = input().split()
    print(f'#{i}', BruteForce(word, element))
